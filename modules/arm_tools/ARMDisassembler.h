#ifndef __ARMDisassembler__
#define __ARMDisassembler__

#include <string>

inline namespace ARM {

    const static int kNoOperand1 = 1;
    const static int kNoDest = 2;
    const static int kNoSBit = 4;

    enum class Opcode {
        INVALID,
        UNDEFINED,
        ADC,
        ADD,
        AND,
        B,
        BL,
        BIC,
        BKPT,
        BLX,
        BX,
        CDP,
        CLREX,
        CLZ,
        CMN,
        CMP,
        EOR,
        LDC,
        LDM,
        LDR,
        LDRB,
        LDRBT,
        LDREX,
        LDREXB,
        LDREXD,
        LDREXH,
        LDRH,
        LDRSB,
        LDRSH,
        LDRT,
        MCR,
        MLA,
        MOV,
        MRC,
        MRS,
        MSR,
        MUL,
        MVN,
        NOP,
        ORR,
        PKH,
        PLD,
        QADD16,
        QADD8,
        QASX,
        QSAX,
        QSUB16,
        QSUB8,
        REV,
        REV16,
        REVSH,
        RSB,
        RSC,
        SADD16,
        SADD8,
        SASX,
        SBC,
        SEL,
        SEV,
        SHADD16,
        SHADD8,
        SHASX,
        SHSAX,
        SHSUB16,
        SHSUB8,
        SMLAD,
        SMLAL,
        SMLALD,
        SMLSD,
        SMLSLD,
        SMMLA,
        SMMLS,
        SMMUL,
        SMUAD,
        SMULL,
        SMUSD,
        SSAT,
        SSAT16,
        SSAX,
        SSUB16,
        SSUB8,
        STC,
        STM,
        STR,
        STRB,
        STRBT,
        STREX,
        STREXB,
        STREXD,
        STREXH,
        STRH,
        STRT,
        SUB,
        SWI, //TODO: change to SVC?
        SWP,
        SWPB,
        SXTAB,
        SXTAB16,
        SXTAH,
        SXTB,
        SXTB16,
        SXTH,
        TEQ,
        TST,
        UADD16,
        UADD8,
        UASX,
        UHADD16,
        UHADD8,
        UHASX,
        UHSAX,
        UHSUB16,
        UHSUB8,
        UMLAL,
        UMULL,
        UQADD16,
        UQADD8,
        UQASX,
        UQSAX,
        UQSUB16,
        UQSUB8,
        USAD8,
        USADA8,
        USAT,
        USAT16,
        USAX,
        USUB16,
        USUB8,
        UXTAB,
        UXTAB16,
        UXTAH,
        UXTB,
        UXTB16,
        UXTH,
        WFE,
        WFI,
        YIELD,
    };

    static const char *opcode_names[] = {
        "invalid",
        "undefined",
        "adc",
        "add",
        "and",
        "b",
        "bl",
        "bic",
        "bkpt",
        "blx",
        "bx",
        "cdp",
        "clrex",
        "clz",
        "cmn",
        "cmp",
        "eor",
        "ldc",
        "ldm",
        "ldr",
        "ldrb",
        "ldrbt",
        "ldrex",
        "ldrexb",
        "ldrexd",
        "ldrexh",
        "ldrh",
        "ldrsb",
        "ldrsh",
        "ldrt",
        "mcr",
        "mla",
        "mov",
        "mrc",
        "mrs",
        "msr",
        "mul",
        "mvn",
        "nop",
        "orr",
        "pkh",
        "pld",
        "qadd16",
        "qadd8",
        "qasx",
        "qsax",
        "qsub16",
        "qsub8",
        "rev",
        "rev16",
        "revsh",
        "rsb",
        "rsc",
        "sadd16",
        "sadd8",
        "sasx",
        "sbc",
        "sel",
        "sev",
        "shadd16",
        "shadd8",
        "shasx",
        "shsax",
        "shsub16",
        "shsub8",
        "smlad",
        "smlal",
        "smlald",
        "smlsd",
        "smlsld",
        "smmla",
        "smmls",
        "smmul",
        "smuad",
        "smull",
        "smusd",
        "ssat",
        "ssat16",
        "ssax",
        "ssub16",
        "ssub8",
        "stc",
        "stm",
        "str",
        "strb",
        "strbt",
        "strex",
        "strexb",
        "strexd",
        "strexh",
        "strh",
        "strt",
        "sub",
        "swi", //TODO: change to SVC?
        "swp",
        "swpb",
        "sxtab",
        "sxtab16",
        "sxtah",
        "sxtb",
        "sxtb16",
        "sxth",
        "teq",
        "tst",
        "uadd16",
        "uadd8",
        "uasx",
        "uhadd16",
        "uhadd8",
        "uhasx",
        "uhsax",
        "uhsub16",
        "uhsub8",
        "umlal",
        "umull",
        "uqadd16",
        "uqadd8",
        "uqasx",
        "uqsax",
        "uqsub16",
        "uqsub8",
        "usad8",
        "usada8",
        "usat",
        "usat16",
        "usax",
        "usub16",
        "usub8",
        "uxtab",
        "uxtab16",
        "uxtah",
        "uxtb",
        "uxtb16",
        "uxth",
        "wfe",
        "wfi",
        "yield",

        "undefined",
        "adc",
        "add",
        "and",
        "asr",
        "b",
        "bic",
        "bkpt",
        "bl",
        "blx",
        "bx",
        "cmn",
        "cmp",
        "eor",
        "ldmia",
        "ldr",
        "ldrb",
        "ldrh",
        "ldrsb",
        "ldrsh",
        "lsl",
        "lsr",
        "mov",
        "mul",
        "mvn",
        "neg",
        "orr",
        "pop",
        "push",
        "ror",
        "sbc",
        "stmia",
        "str",
        "strb",
        "strh",
        "sub",
        "swi",
        "tst",

        nullptr
    };

    static const char *cond_names[] = {
        "eq",
        "ne",
        "cs",
        "cc",
        "mi",
        "pl",
        "vs",
        "vc",
        "hi",
        "ls",
        "ge",
        "lt",
        "gt",
        "le",
        "",
        "RESERVED"
    };

    static const char *shift_names[] = {
        "LSL",
        "LSR",
        "ASR",
        "ROR"
    };

    class ARMDisassembler {
    public:
        std::string Disassemble(uint32_t addr, uint32_t instr);
        Opcode Decode(uint32_t instr);
    private:
        std::string DisassembleALU(Opcode opcode, uint32_t instr);

        Opcode Decode00(uint32_t instr);
        Opcode Decode01(uint32_t instr);
        Opcode Decode10(uint32_t instr);
        Opcode Decode11(uint32_t instr);

        Opcode DecodeSyncPrimitive(uint32_t instr);
        Opcode DecodeMUL(uint32_t instr);
        Opcode DecodeLDRH(uint32_t instr);
        Opcode DecodeMSRImmAndHints(uint32_t instr);
        Opcode DecodeALU(uint32_t instr);
        Opcode DecodeMedia(uint32_t instr);
    };

} // ARM

#endif /* __ARMDisassembler__ */
